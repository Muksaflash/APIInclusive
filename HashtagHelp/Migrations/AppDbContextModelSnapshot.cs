// <auto-generated />
using System;
using HashtagHelp.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HashtagHelp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("HashtagHelp.Domain.Models.FunnelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("FunnelText")
                        .HasColumnType("longtext");

                    b.Property<long>("HashtagsNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("MaxTagMediaCount")
                        .HasColumnType("bigint");

                    b.Property<long>("MinFollowersTagFreq")
                        .HasColumnType("bigint");

                    b.Property<long>("MinMediaCountInterval")
                        .HasColumnType("bigint");

                    b.Property<long>("MinTagMediaCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("FunnelEntity");
                });

            modelBuilder.Entity("HashtagHelp.Domain.Models.GeneralTaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CollectionTaskId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ErrorInfo")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<Guid?>("FiltrationTaskId")
                        .HasColumnType("char(36)");

                    b.Property<string>("HashtagArea")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MainParserApiKey")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ParserUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CollectionTaskId");

                    b.HasIndex("FiltrationTaskId");

                    b.HasIndex("UserId");

                    b.ToTable("GeneralTasks");
                });

            modelBuilder.Entity("HashtagHelp.Domain.Models.HashtagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("FollowerEntityId")
                        .HasColumnType("char(36)");

                    b.Property<string>("InstagramId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MediaCount")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FollowerEntityId");

                    b.ToTable("Hashtags");
                });

            modelBuilder.Entity("HashtagHelp.Domain.Models.ParserTaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("InParserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("HashtagHelp.Domain.Models.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SocialId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UserEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("HashtagHelp.Domain.Models.FollowerEntity", b =>
                {
                    b.HasBaseType("HashtagHelp.Domain.Models.UserEntity");

                    b.Property<Guid?>("ResearchedUserEntityId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ResearchedUserNickName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasIndex("ResearchedUserEntityId");

                    b.HasDiscriminator().HasValue("FollowerEntity");
                });

            modelBuilder.Entity("HashtagHelp.Domain.Models.ResearchedUserEntity", b =>
                {
                    b.HasBaseType("HashtagHelp.Domain.Models.UserEntity");

                    b.Property<uint>("FollowersNumber")
                        .HasColumnType("int unsigned");

                    b.Property<Guid?>("FunnelId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ParserTaskEntityId")
                        .HasColumnType("char(36)");

                    b.HasIndex("FunnelId");

                    b.HasIndex("ParserTaskEntityId");

                    b.HasDiscriminator().HasValue("ResearchedUserEntity");
                });

            modelBuilder.Entity("HashtagHelp.Domain.Models.GeneralTaskEntity", b =>
                {
                    b.HasOne("HashtagHelp.Domain.Models.ParserTaskEntity", "CollectionTask")
                        .WithMany()
                        .HasForeignKey("CollectionTaskId");

                    b.HasOne("HashtagHelp.Domain.Models.ParserTaskEntity", "FiltrationTask")
                        .WithMany()
                        .HasForeignKey("FiltrationTaskId");

                    b.HasOne("HashtagHelp.Domain.Models.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CollectionTask");

                    b.Navigation("FiltrationTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HashtagHelp.Domain.Models.HashtagEntity", b =>
                {
                    b.HasOne("HashtagHelp.Domain.Models.FollowerEntity", null)
                        .WithMany("FollowedTags")
                        .HasForeignKey("FollowerEntityId");
                });

            modelBuilder.Entity("HashtagHelp.Domain.Models.FollowerEntity", b =>
                {
                    b.HasOne("HashtagHelp.Domain.Models.ResearchedUserEntity", null)
                        .WithMany("Followers")
                        .HasForeignKey("ResearchedUserEntityId");
                });

            modelBuilder.Entity("HashtagHelp.Domain.Models.ResearchedUserEntity", b =>
                {
                    b.HasOne("HashtagHelp.Domain.Models.FunnelEntity", "Funnel")
                        .WithMany()
                        .HasForeignKey("FunnelId");

                    b.HasOne("HashtagHelp.Domain.Models.ParserTaskEntity", null)
                        .WithMany("ResearchedUsers")
                        .HasForeignKey("ParserTaskEntityId");

                    b.Navigation("Funnel");
                });

            modelBuilder.Entity("HashtagHelp.Domain.Models.ParserTaskEntity", b =>
                {
                    b.Navigation("ResearchedUsers");
                });

            modelBuilder.Entity("HashtagHelp.Domain.Models.FollowerEntity", b =>
                {
                    b.Navigation("FollowedTags");
                });

            modelBuilder.Entity("HashtagHelp.Domain.Models.ResearchedUserEntity", b =>
                {
                    b.Navigation("Followers");
                });
#pragma warning restore 612, 618
        }
    }
}
